			-*- html -*-

@author dominic
@copyright 2020-2020 dominic
@version {@version}
@title Ptolemaios Overview

@doc Ptolemaios是一个游戏服务器框架, 目标是在windows平台使用rebar3和idea提高开发效率和优化代码管理

== Contents ==

<ol>
  <li>{@section 安装}</li>
  <li>{@section 规范}</li>
  <li>{@section 工具(util)}</li>
  <li>{@section 数据(virture)}</li>
  <li>{@section 进程(exia)}</li>
  <li>{@section 协议(proto)}</li>
  <li>{@section 网关(gateway)}</li>
  <li>{@section 修复(fix)}</li>
  <li>{@section 发布(release)}</li>
  <li>{@section 配置(xlsx)}</li>
  <li>{@section 性能(performance)}</li>
  <li>{@section 结构(struct)}</li>
  <li>{@section 行为树(behaviac)}</li>
</ol>

== 安装 ==

clone项目, 设置window编译环境(查看rebar3.cmd)

设置config/sys.config.script, gateway(tcp端口)和virture(数据库)

rebar3 shell即可启动

== 规范 ==

=== 设计思路 ===

利用idea的Find Usages功能, 业务系统, 消息, 动态调用(MFA), 尽量利用宏或者函数包起来, 可以提高代码维护的效率(相比全局搜索).

每个业务系统都有自己的唯一标识(下面用{MODULE}代替), 逻辑上每个业务的分块保持树状结构, 使每个业务开发的时候能够保持逻辑和模块的互相独立

实际上业务系统逻辑总是互相交叉, 这样仅仅为了把代码都放在'自己'的系统里面, A系统需要B系统提供XXX时, 代码写到A系统对应的模块中, 尽量避免写到B系统的模块中, 除非忍不住

```
业务模块({MODULE})
|--业务子模块N
    |--业务子子模块N
        ...'''

有时名字会非常非常长, 所以引入缩写的设定, 例如:  gateway_client_svr => gateway_c_svr, abcdef_ghijklmn_opq => ago

这里使用 module_sname.txt 人工维护业务系统标识(必须写)和名字缩写, 保证里面所有名字(包括缩写)唯一, 简单来说就是全词搜索新名字直到找不到匹配, 那么这个名字就是可用的

注意文件夹不要使用缩写, 不然看的时候会很痛苦-_-!

=== 模块命名 ===

{MODULE}[_sub[_subsub[...]]]

例如, player, player_info, player_api, player_api_data, player_api_msg

=== 宏命名 ===

[内部标识_]{MODULE}[_标识[_标识[...]]]

例如, ?PD_PLAYER_NAME, ?PLAYER_ID, ?MSG_PLAYER_GET_ID

内部标识

<dl>
    <dt>进程字典</dt>
    <dd>使用?PD_{MODULE}_{TAG}[参数个数]的宏包装, 例如
    ```
    -define(PD_PLAYER_NAME, pd_player_name).% 玩家名字

    -define(PD_PLAYER_NAME1(Id), {pd_player_name, Id}).% 玩家名字
    '''</dd>
    <dt>进程消息</dt>
    <dd>使用?MSG_{MODULE}_{TAG}[参数个数]的宏包装, 哪个进程处理{MODULE}就打哪个, 例如
    ```
    -define(MSG_GET_PLAYER_NAME, get_player_name).% 玩家名字

    -define(MSG_GET_PLAYER_NAME1(Id), {get_player_names, Id}).% 玩家名字
    '''</dd>
    <dt>ets名字</dt>
    <dd>使用?ETS_{MODULE}_{TAG}[参数个数]的宏包装, 例如
    ```
    -define(ETS_PLAYER_NAME, ets_player_name).% 玩家名字

    -define(ETS_PLAYER_NAME1(ServerId), list_to_atom("ets_player_name_" ++ integer_to_list(ServerId))).% 某个服务器的玩家名字
    '''</dd>
    <dt>dets名字</dt>
    <dd>使用?DETS_{MODULE}_{TAG}[参数个数]的宏包装, 例如
    ```
    -define(DETS_PLAYER_NAME, ets_player_name).% 玩家名字

    -define(DETS_PLAYER_NAME1(ServerId), list_to_atom("ets_player_name_" ++ integer_to_list(ServerId))).% 某个服务器的玩家名字
    '''</dd>
    <dt>动态调用</dt>
    <dd>使用?DYM_{MODULE}_{TAG}[参数个数]的宏包装, 例如
    ```
    -define(?DYM_HERO_MODULE(Id), list_to_atom("hero_" ++ integer_to_list(Id))).% xxx英雄模块

     -define(?DYM_HERO_CALLBACK, [hero_1, hero_2]).% 英雄回调模块
    '''</dd>
    <dt>数据库语句</dt>
    <dd>使用?SQL_{MODULE}_{TAG}[参数个数]的宏包装, 例如
    ```
    -define(?SQL_ALL_HERO(Id), io_lib:format("select * from hero where id=~p", [Id])).% 查找所有英雄的sql

    -define(?SQL_NEW_HERO(Id), io_lib:format("insert into hero set id=~p", [Id])).% 插入一个英雄的sql
    '''</dd>
</dl>

=== 函数名 ===

只要能达成好查都可以.

cast, call, rpc之类的操作在模块中再写一个函数包起来; 例如: my_server:call, my_server:cast.

对于动态执行MFA, 使用模块名的宏或者生成模块名的宏包装; 例如: [apply(M, run, []) || M ``<-'' [?PLAYER]], (?MAKE_NAME(Integer)):run().

过长的名字依然推荐使用缩写, 在函数注释好即可.

== 工具(util) ==

util文件夹下均为工具类模块, 每个模块等效于一个系统, 会记在module_sname.txt的意思.

<dl>
    <dt>util.hrl</dt>
    <dd>?[DO_]IF[_NOT], 如果 xxx do_something

    ?[DO_][NOT_]MATCH, 匹配 xxx do_something</dd>
    <dt>{@link fold}</dt>
    <dd>支持break的遍历</dd>
    <dt>{@link kv_op}</dt>
    <dd>键值型数据结构操作</dd>
    <dt>{@link local_lock}</dt>
    <dd>单节点的锁</dd>
    <dt>{@link log}</dt>
    <dd>日志系统</dd>
    <dt>{@link util}</dt>
    <dd>工具杂项</dd>
</dl>

== 数据(virture) ==

基于一份数据同时只能由一个进程修改的思路, 一个进程可以拥有一个或多个数据表的数据集, 数据更改需要由对应进程执行, 例如: 玩家进程可以拥有物品表(goods)中 player_id = xxx 的数据和玩家表(player)中 player_id = xxx 的数据, 其中 player_id = xxx 划分了不同的数据集; 当然也存在整个数据表作为数据集的情况, 例如: XXX活动数据.

这部分已整合到{@section 进程(exia)}.

=== 流程概述 ===
<dl>
    <dt>load</dt>
    <dd>从db中查询数据集, 转换成record并保存到ets和进程</dd>
    <dt>lookup</dt>
    <dd>从进程缓存中读取数据</dd>
    <dt>insert</dt>
    <dd>数据打上标识并插入(更新)到进程缓存中</dd>
    <dt>delete</dt>
    <dd>和insert同理, 仅标识不一样</dd>
    <dt>sync_to_ets</dt>
    <dd>同步所有改变的数据到ets</dd>
    <dt>sync_to_db</dt>
    <dd>同步所有改变的数据到数据库</dd>
    <dt>sync_to_dets</dt>
    <dd>同步所有同步数据库失败的数据到dets中</dd>
</dl>

=== 脏读 ===

参考vsql:dirty_lookup/2, 直接从ets获取数据, 但是需要保证想要的数据已经加载到ets

=== virture_mysql ===

使用mysql作为数据库, 详情查看{@link vsql}.

== 进程(exia) ==

基于gen_server改写的一个behaviour, 实现数据回滚保证进程处理消息时数据的一致性.

进程启动成功后, 进程内部除了返回{stop,...}外无法结束进程; 进程在遇到错误时自动回滚到以前状态, 其中回滚包括: 进程状态, 异步消息, virture数据.....

详情查看{@link exia}.

== 协议(proto) ==

=== 概述 ===

协议使用rebar3的gpb插件, 按照{@link proto}的规范编写的.proto文件(消息多带一个协议号), 在生成协议的同时框架会生成proto_mapping.erl和协议消息处理模板.

=== proto_mapping.erl ===

自动生成enif需要的load协议代码, 协议名字和协议号的相互匹配, 协议到处理模板的路由, 文件生成位置src/proto.

=== 协议消息处理模板 ===

{proto文件名}_handle, 仅有一个handle函数, 主要为了支持mapping的路由, 文件生成位置src/proto/handle.

=== 一个设计思路 ===

客户端的消息仅在成功时或者客户端需要时才会返回, 开发的时候服务端可以只需要定好上行的协议, 那么此时返回的协议有两种情况:

``` 第一, 客户端需要返回特定数据用于显示或者更新, 这里用对应下行的协议
    第二, 显示错误码, 这里用通用错误码协议'''

== 网关(gateway) ==

网关部分使用ranch监听客户端连接, 转发或处理客户端消息, 详情查看{@link gateway}.

client实现和gateway的协议通讯, 用于模拟客户端, 详情查看{@link client}.

== 修复(fix) ==

热更新{@link fix_hot}, {@section 发布(release)}

节点重启更新{@link fix_restart}

== 发布(release) ==

发布使用release/release.escript

=== 设计思路 ===

一个版本 = 一个tar + n个ebin更新

其中 tar 和 ebin的关系通过打包时间来判定, 例如

时间a -> 时间a1         -> 时间a2        -> 时间b -> 时间b1 ...

tar_a -> tar_ebin_a1    -> tar_ebin_a2  -> tar_b -> tar_ebin_b2

那么, 版本a = tar_a + (tar_ebin_a1 + tar_ebin_a2), 版本b = tar_b + (tar_ebin_b2)

=== 流程和脚本命令 ===

首先, 最重要的, 脚本会使用中间文件和文件夹, 所以请使用正确的权限执行!!!!!

<dl>
    <dt>tar</dt>
    <dd>打包app, 生成app_name.tar.gz, 其中app信息使用rebar.config.script中的{relx, [{release, ReleaseName(AppName), Version}]}, <b>ReleaseName和AppName必须相同</b>, 不同release用Version表达就好</dd>
    <dt>tar_backup</dt>
    <dd>打包'一个版本'的app和ebin, 生成app_name.tar.gz, 使用backup中的文件</dd>
    <dt>replace_tar</dt>
    <dd>初始化app -> 启动节点 -> 更新ebin 或 关闭节点 -> 替换app包 -> 启动节点 -> 更新ebin</dd>
    <dt>stop</dt>
    <dd>关闭节点</dd>
    <dt>restart</dt>
    <dd>关闭节点 -> 启动节点</dd>
    <dt>tar_ebin</dt>
    <dd>打包app的ebin, 和tar一样从rebar.config.script中获取信息</dd>
    <dt>update_ebin</dt>
    <dd>替换app的ebin, 如果节点启动, 则使用rpc call调用更新函数</dd>
    <dt>backup_tree</dt>
    <dd>如果tar和tar_ebin都会备份到一个文件夹, 那么根据备份文件中的时间戳会生成类似 [{tar1, [ebin11, ebin12..]}, {tar2, [ebin21, ebin22..]}] 的顺序结构, 反映某个tar下的所有ebin更新</dd>
    <dt>update_backup</dt>
    <dd>使用当前的lib更新backup文件夹里某个版本以后所有tar.gz里的beam文件</dd>
</dl>

== 配置(xlsx) ==

xlsx2erl文件夹下的项目用于生成配置

xlsx第一列作为mask, 某行没有mask将被忽略掉

详细定义到xlsx2erl.hrl查看

== 性能(performance) ==

各式各样的性能测试, 这些文件仅用于测试性能, 实际生产中并不使用, 文件不会生产文档, 详情查看src/performance/*.erl.

== 结构(struct) ==

各式各样的数据结构, 部分结构并不能在实际生产中使用, 仅用于测试对比, 详情查看src/struct/*.erl.

== 行为树(behaviac) ==

接入腾讯开源的行为树工具, 目前实现调用工具产生的代码和行为树, 详情查看{@link behaviac_enif}.