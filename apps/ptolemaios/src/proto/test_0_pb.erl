%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.13.0
-module(test_0_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("test_0_pb.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type proto_test() :: #proto_test{}.

-type proto_test2() :: #proto_test2{}.

-type proto_test3() :: #proto_test3{}.

-type proto_test4() :: #proto_test4{}.

-type test_import() :: #test_import{}.

-export_type(['proto_test'/0, 'proto_test2'/0, 'proto_test3'/0, 'proto_test4'/0, 'test_import'/0]).

-spec encode_msg(#proto_test{} | #proto_test2{} | #proto_test3{} | #proto_test4{} | #test_import{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 -> encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#proto_test{} | #proto_test2{} | #proto_test3{} | #proto_test4{} | #test_import{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) -> encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts) when tuple_size(Msg) >= 1, is_list(Opts) -> encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#proto_test{} | #proto_test2{} | #proto_test3{} | #proto_test4{} | #test_import{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        proto_test -> encode_msg_proto_test(id(Msg, TrUserData), TrUserData);
        proto_test2 -> encode_msg_proto_test2(id(Msg, TrUserData), TrUserData);
        proto_test3 -> encode_msg_proto_test3(id(Msg, TrUserData), TrUserData);
        proto_test4 -> encode_msg_proto_test4(id(Msg, TrUserData), TrUserData);
        test_import -> encode_msg_test_import(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_proto_test(Msg, TrUserData) -> encode_msg_proto_test(Msg, <<>>, TrUserData).


encode_msg_proto_test(#proto_test{str = F1, ui32 = F2, rp_str = F3, rp_ui32 = F4}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    B2 = if F2 == undefined -> B1;
            true ->
                begin
                    TrF2 = id(F2, TrUserData),
                    if TrF2 =:= 0 -> B1;
                       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
                    end
                end
         end,
    B3 = begin
             TrF3 = id(F3, TrUserData),
             if TrF3 == [] -> B2;
                true -> e_field_proto_test_rp_str(TrF3, B2, TrUserData)
             end
         end,
    begin
        TrF4 = id(F4, TrUserData),
        if TrF4 == [] -> B3;
           true -> e_field_proto_test_rp_ui32(TrF4, B3, TrUserData)
        end
    end.

encode_msg_proto_test2(Msg, TrUserData) -> encode_msg_proto_test2(Msg, <<>>, TrUserData).


encode_msg_proto_test2(#proto_test2{str = F1, ti = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= undefined -> B1;
                  true -> e_mfield_proto_test2_ti(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_proto_test3(Msg, TrUserData) -> encode_msg_proto_test3(Msg, <<>>, TrUserData).


encode_msg_proto_test3(#proto_test3{str = F1, ti = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    case is_empty_string(TrF1) of
                        true -> Bin;
                        false -> e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= undefined -> B1;
                  true -> e_mfield_proto_test3_ti(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_proto_test4(Msg, TrUserData) -> encode_msg_proto_test4(Msg, <<>>, TrUserData).


encode_msg_proto_test4(#proto_test4{t3 = F1, ti = F2}, Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
            true ->
                begin
                    TrF1 = id(F1, TrUserData),
                    if TrF1 =:= undefined -> Bin;
                       true -> e_mfield_proto_test4_t3(TrF1, <<Bin/binary, 10>>, TrUserData)
                    end
                end
         end,
    if F2 == undefined -> B1;
       true ->
           begin
               TrF2 = id(F2, TrUserData),
               if TrF2 =:= undefined -> B1;
                  true -> e_mfield_proto_test4_ti(TrF2, <<B1/binary, 18>>, TrUserData)
               end
           end
    end.

encode_msg_test_import(Msg, TrUserData) -> encode_msg_test_import(Msg, <<>>, TrUserData).


encode_msg_test_import(#test_import{ui32 = F1}, Bin, TrUserData) ->
    if F1 == undefined -> Bin;
       true ->
           begin
               TrF1 = id(F1, TrUserData),
               if TrF1 =:= 0 -> Bin;
                  true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
               end
           end
    end.

e_field_proto_test_rp_str([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2, TrUserData),
    e_field_proto_test_rp_str(Rest, Bin3, TrUserData);
e_field_proto_test_rp_str([], Bin, _TrUserData) -> Bin.

e_field_proto_test_rp_ui32(Elems, Bin, TrUserData) when Elems =/= [] ->
    SubBin = e_pfield_proto_test_rp_ui32(Elems, <<>>, TrUserData),
    Bin2 = <<Bin/binary, 34>>,
    Bin3 = e_varint(byte_size(SubBin), Bin2),
    <<Bin3/binary, SubBin/binary>>;
e_field_proto_test_rp_ui32([], Bin, _TrUserData) -> Bin.

e_pfield_proto_test_rp_ui32([Value | Rest], Bin, TrUserData) ->
    Bin2 = e_varint(id(Value, TrUserData), Bin, TrUserData),
    e_pfield_proto_test_rp_ui32(Rest, Bin2, TrUserData);
e_pfield_proto_test_rp_ui32([], Bin, _TrUserData) -> Bin.

e_mfield_proto_test2_ti(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_test_import(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_proto_test3_ti(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_test_import(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_proto_test4_t3(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_proto_test3(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_proto_test4_ti(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_test_import(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 -> e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) -> e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData) when 0 =< Value, Value =< 127 -> <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) -> <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData) when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData) when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) -> <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) -> <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) -> <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) -> <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) -> <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) -> <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) -> <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) -> <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) -> <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) -> <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) -> not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
        true -> true;
        false -> string_has_chars(T)
    end;
string_has_chars(B) when is_binary(B), byte_size(B) =/= 0 -> true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) -> decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(proto_test, Bin, TrUserData) -> id(decode_msg_proto_test(Bin, TrUserData), TrUserData);
decode_msg_2_doit(proto_test2, Bin, TrUserData) -> id(decode_msg_proto_test2(Bin, TrUserData), TrUserData);
decode_msg_2_doit(proto_test3, Bin, TrUserData) -> id(decode_msg_proto_test3(Bin, TrUserData), TrUserData);
decode_msg_2_doit(proto_test4, Bin, TrUserData) -> id(decode_msg_proto_test4(Bin, TrUserData), TrUserData);
decode_msg_2_doit(test_import, Bin, TrUserData) -> id(decode_msg_test_import(Bin, TrUserData), TrUserData).



decode_msg_proto_test(Bin, TrUserData) -> dfp_read_field_def_proto_test(Bin, 0, 0, id(<<>>, TrUserData), id(0, TrUserData), id([], TrUserData), id([], TrUserData), TrUserData).

dfp_read_field_def_proto_test(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_proto_test_str(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_proto_test(<<16, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_proto_test_ui32(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_proto_test(<<26, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_proto_test_rp_str(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_proto_test(<<34, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_pfield_proto_test_rp_ui32(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_proto_test(<<32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> d_field_proto_test_rp_ui32(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_proto_test(<<>>, 0, 0, F@_1, F@_2, R1, R2, TrUserData) -> #proto_test{str = F@_1, ui32 = F@_2, rp_str = lists_reverse(R1, TrUserData), rp_ui32 = lists_reverse(R2, TrUserData)};
dfp_read_field_def_proto_test(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dg_read_field_def_proto_test(Other, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_proto_test(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 32 - 7 -> dg_read_field_def_proto_test(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_proto_test(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_proto_test_str(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        16 -> d_field_proto_test_ui32(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        26 -> d_field_proto_test_rp_str(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        34 -> d_pfield_proto_test_rp_ui32(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        32 -> d_field_proto_test_rp_ui32(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_proto_test(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                1 -> skip_64_proto_test(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                2 -> skip_length_delimited_proto_test(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                3 -> skip_group_proto_test(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3, F@_4, TrUserData);
                5 -> skip_32_proto_test(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData)
            end
    end;
dg_read_field_def_proto_test(<<>>, 0, 0, F@_1, F@_2, R1, R2, TrUserData) -> #proto_test{str = F@_1, ui32 = F@_2, rp_str = lists_reverse(R1, TrUserData), rp_ui32 = lists_reverse(R2, TrUserData)}.

d_field_proto_test_str(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_proto_test_str(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_proto_test_str(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_proto_test(RestF, 0, 0, NewFValue, F@_2, F@_3, F@_4, TrUserData).

d_field_proto_test_ui32(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_proto_test_ui32(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_proto_test_ui32(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_proto_test(RestF, 0, 0, F@_1, NewFValue, F@_3, F@_4, TrUserData).

d_field_proto_test_rp_str(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_proto_test_rp_str(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_proto_test_rp_str(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_proto_test(RestF, 0, 0, F@_1, F@_2, cons(NewFValue, Prev, TrUserData), F@_4, TrUserData).

d_field_proto_test_rp_ui32(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_field_proto_test_rp_ui32(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_proto_test_rp_ui32(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_proto_test(RestF, 0, 0, F@_1, F@_2, F@_3, cons(NewFValue, Prev, TrUserData), TrUserData).

d_pfield_proto_test_rp_ui32(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> d_pfield_proto_test_rp_ui32(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
d_pfield_proto_test_rp_ui32(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_proto_test_rp_ui32(PackedBytes, 0, 0, E, TrUserData),
    dfp_read_field_def_proto_test(Rest2, 0, 0, F@_1, F@_2, F@_3, NewSeq, TrUserData).

d_packed_field_proto_test_rp_ui32(<<1:1, X:7, Rest/binary>>, N, Acc, AccSeq, TrUserData) when N < 57 -> d_packed_field_proto_test_rp_ui32(Rest, N + 7, X bsl N + Acc, AccSeq, TrUserData);
d_packed_field_proto_test_rp_ui32(<<0:1, X:7, Rest/binary>>, N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    d_packed_field_proto_test_rp_ui32(RestF, 0, 0, [NewFValue | AccSeq], TrUserData);
d_packed_field_proto_test_rp_ui32(<<>>, 0, 0, AccSeq, _) -> AccSeq.

skip_varint_proto_test(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> skip_varint_proto_test(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_proto_test(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_proto_test(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_proto_test(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) when N < 57 -> skip_length_delimited_proto_test(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_proto_test(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_proto_test(Rest2, 0, 0, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_proto_test(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_proto_test(Rest, 0, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_proto_test(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_proto_test(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_proto_test(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) -> dfp_read_field_def_proto_test(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_proto_test2(Bin, TrUserData) -> dfp_read_field_def_proto_test2(Bin, 0, 0, id(<<>>, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_proto_test2(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_proto_test2_str(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_proto_test2(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_proto_test2_ti(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_proto_test2(<<>>, 0, 0, F@_1, F@_2, _) -> #proto_test2{str = F@_1, ti = F@_2};
dfp_read_field_def_proto_test2(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_proto_test2(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_proto_test2(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_proto_test2(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_proto_test2(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_proto_test2_str(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_proto_test2_ti(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_proto_test2(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_proto_test2(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_proto_test2(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_proto_test2(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_proto_test2(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_proto_test2(<<>>, 0, 0, F@_1, F@_2, _) -> #proto_test2{str = F@_1, ti = F@_2}.

d_field_proto_test2_str(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_proto_test2_str(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_proto_test2_str(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_proto_test2(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_proto_test2_ti(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_proto_test2_ti(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_proto_test2_ti(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_test_import(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_proto_test2(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   if Prev == undefined -> NewFValue;
                                      true -> merge_msg_test_import(Prev, NewFValue, TrUserData)
                                   end,
                                   TrUserData).

skip_varint_proto_test2(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_proto_test2(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_proto_test2(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_proto_test2(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_proto_test2(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_proto_test2(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_proto_test2(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_proto_test2(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_proto_test2(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_proto_test2(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_proto_test2(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_proto_test2(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_proto_test2(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_proto_test2(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_proto_test3(Bin, TrUserData) -> dfp_read_field_def_proto_test3(Bin, 0, 0, id(<<>>, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_proto_test3(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_proto_test3_str(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_proto_test3(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_proto_test3_ti(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_proto_test3(<<>>, 0, 0, F@_1, F@_2, _) -> #proto_test3{str = F@_1, ti = F@_2};
dfp_read_field_def_proto_test3(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_proto_test3(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_proto_test3(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_proto_test3(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_proto_test3(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_proto_test3_str(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_proto_test3_ti(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_proto_test3(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_proto_test3(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_proto_test3(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_proto_test3(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_proto_test3(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_proto_test3(<<>>, 0, 0, F@_1, F@_2, _) -> #proto_test3{str = F@_1, ti = F@_2}.

d_field_proto_test3_str(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_proto_test3_str(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_proto_test3_str(<<0:1, X:7, Rest/binary>>, N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bytes:Len/binary, Rest2/binary>> = Rest, {id(binary:copy(Bytes), TrUserData), Rest2} end,
    dfp_read_field_def_proto_test3(RestF, 0, 0, NewFValue, F@_2, TrUserData).

d_field_proto_test3_ti(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_proto_test3_ti(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_proto_test3_ti(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_test_import(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_proto_test3(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   if Prev == undefined -> NewFValue;
                                      true -> merge_msg_test_import(Prev, NewFValue, TrUserData)
                                   end,
                                   TrUserData).

skip_varint_proto_test3(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_proto_test3(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_proto_test3(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_proto_test3(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_proto_test3(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_proto_test3(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_proto_test3(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_proto_test3(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_proto_test3(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_proto_test3(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_proto_test3(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_proto_test3(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_proto_test3(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_proto_test3(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_proto_test4(Bin, TrUserData) -> dfp_read_field_def_proto_test4(Bin, 0, 0, id(undefined, TrUserData), id(undefined, TrUserData), TrUserData).

dfp_read_field_def_proto_test4(<<10, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_proto_test4_t3(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_proto_test4(<<18, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> d_field_proto_test4_ti(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_proto_test4(<<>>, 0, 0, F@_1, F@_2, _) -> #proto_test4{t3 = F@_1, ti = F@_2};
dfp_read_field_def_proto_test4(Other, Z1, Z2, F@_1, F@_2, TrUserData) -> dg_read_field_def_proto_test4(Other, Z1, Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_proto_test4(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 32 - 7 -> dg_read_field_def_proto_test4(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_proto_test4(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_proto_test4_t3(Rest, 0, 0, F@_1, F@_2, TrUserData);
        18 -> d_field_proto_test4_ti(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_proto_test4(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 -> skip_64_proto_test4(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 -> skip_length_delimited_proto_test4(Rest, 0, 0, F@_1, F@_2, TrUserData);
                3 -> skip_group_proto_test4(Rest, Key bsr 3, 0, F@_1, F@_2, TrUserData);
                5 -> skip_32_proto_test4(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_proto_test4(<<>>, 0, 0, F@_1, F@_2, _) -> #proto_test4{t3 = F@_1, ti = F@_2}.

d_field_proto_test4_t3(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_proto_test4_t3(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_proto_test4_t3(<<0:1, X:7, Rest/binary>>, N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_proto_test3(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_proto_test4(RestF,
                                   0,
                                   0,
                                   if Prev == undefined -> NewFValue;
                                      true -> merge_msg_proto_test3(Prev, NewFValue, TrUserData)
                                   end,
                                   F@_2,
                                   TrUserData).

d_field_proto_test4_ti(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> d_field_proto_test4_ti(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_proto_test4_ti(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin Len = X bsl N + Acc, <<Bs:Len/binary, Rest2/binary>> = Rest, {id(decode_msg_test_import(Bs, TrUserData), TrUserData), Rest2} end,
    dfp_read_field_def_proto_test4(RestF,
                                   0,
                                   0,
                                   F@_1,
                                   if Prev == undefined -> NewFValue;
                                      true -> merge_msg_test_import(Prev, NewFValue, TrUserData)
                                   end,
                                   TrUserData).

skip_varint_proto_test4(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> skip_varint_proto_test4(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_proto_test4(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_proto_test4(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_proto_test4(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) when N < 57 -> skip_length_delimited_proto_test4(Rest, N + 7, X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_proto_test4(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_proto_test4(Rest2, 0, 0, F@_1, F@_2, TrUserData).

skip_group_proto_test4(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_proto_test4(Rest, 0, Z2, F@_1, F@_2, TrUserData).

skip_32_proto_test4(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_proto_test4(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

skip_64_proto_test4(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2, TrUserData) -> dfp_read_field_def_proto_test4(Rest, Z1, Z2, F@_1, F@_2, TrUserData).

decode_msg_test_import(Bin, TrUserData) -> dfp_read_field_def_test_import(Bin, 0, 0, id(0, TrUserData), TrUserData).

dfp_read_field_def_test_import(<<8, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> d_field_test_import_ui32(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_test_import(<<>>, 0, 0, F@_1, _) -> #test_import{ui32 = F@_1};
dfp_read_field_def_test_import(Other, Z1, Z2, F@_1, TrUserData) -> dg_read_field_def_test_import(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_test_import(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 32 - 7 -> dg_read_field_def_test_import(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_test_import(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        8 -> d_field_test_import_ui32(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_test_import(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_test_import(Rest, 0, 0, F@_1, TrUserData);
                2 -> skip_length_delimited_test_import(Rest, 0, 0, F@_1, TrUserData);
                3 -> skip_group_test_import(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_test_import(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_test_import(<<>>, 0, 0, F@_1, _) -> #test_import{ui32 = F@_1}.

d_field_test_import_ui32(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> d_field_test_import_ui32(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
d_field_test_import_ui32(<<0:1, X:7, Rest/binary>>, N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData), Rest},
    dfp_read_field_def_test_import(RestF, 0, 0, NewFValue, TrUserData).

skip_varint_test_import(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> skip_varint_test_import(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_test_import(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_test_import(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_test_import(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) when N < 57 -> skip_length_delimited_test_import(Rest, N + 7, X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_test_import(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_test_import(Rest2, 0, 0, F@_1, TrUserData).

skip_group_test_import(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_test_import(Rest, 0, Z2, F@_1, TrUserData).

skip_32_test_import(<<_:32, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_test_import(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_test_import(<<_:64, Rest/binary>>, Z1, Z2, F@_1, TrUserData) -> dfp_read_field_def_test_import(Rest, Z1, Z2, F@_1, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New) when element(1, Prev) =:= element(1, New) -> merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) -> merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts) when element(1, Prev) =:= element(1, New), is_list(Opts) -> merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        proto_test -> merge_msg_proto_test(Prev, New, TrUserData);
        proto_test2 -> merge_msg_proto_test2(Prev, New, TrUserData);
        proto_test3 -> merge_msg_proto_test3(Prev, New, TrUserData);
        proto_test4 -> merge_msg_proto_test4(Prev, New, TrUserData);
        test_import -> merge_msg_test_import(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_proto_test/3}).
merge_msg_proto_test(#proto_test{str = PFstr, ui32 = PFui32, rp_str = PFrp_str, rp_ui32 = PFrp_ui32}, #proto_test{str = NFstr, ui32 = NFui32, rp_str = NFrp_str, rp_ui32 = NFrp_ui32}, TrUserData) ->
    #proto_test{str =
                    if NFstr =:= undefined -> PFstr;
                       true -> NFstr
                    end,
                ui32 =
                    if NFui32 =:= undefined -> PFui32;
                       true -> NFui32
                    end,
                rp_str =
                    if PFrp_str /= undefined, NFrp_str /= undefined -> 'erlang_++'(PFrp_str, NFrp_str, TrUserData);
                       PFrp_str == undefined -> NFrp_str;
                       NFrp_str == undefined -> PFrp_str
                    end,
                rp_ui32 =
                    if PFrp_ui32 /= undefined, NFrp_ui32 /= undefined -> 'erlang_++'(PFrp_ui32, NFrp_ui32, TrUserData);
                       PFrp_ui32 == undefined -> NFrp_ui32;
                       NFrp_ui32 == undefined -> PFrp_ui32
                    end}.

-compile({nowarn_unused_function,merge_msg_proto_test2/3}).
merge_msg_proto_test2(#proto_test2{str = PFstr, ti = PFti}, #proto_test2{str = NFstr, ti = NFti}, TrUserData) ->
    #proto_test2{str =
                     if NFstr =:= undefined -> PFstr;
                        true -> NFstr
                     end,
                 ti =
                     if PFti /= undefined, NFti /= undefined -> merge_msg_test_import(PFti, NFti, TrUserData);
                        PFti == undefined -> NFti;
                        NFti == undefined -> PFti
                     end}.

-compile({nowarn_unused_function,merge_msg_proto_test3/3}).
merge_msg_proto_test3(#proto_test3{str = PFstr, ti = PFti}, #proto_test3{str = NFstr, ti = NFti}, TrUserData) ->
    #proto_test3{str =
                     if NFstr =:= undefined -> PFstr;
                        true -> NFstr
                     end,
                 ti =
                     if PFti /= undefined, NFti /= undefined -> merge_msg_test_import(PFti, NFti, TrUserData);
                        PFti == undefined -> NFti;
                        NFti == undefined -> PFti
                     end}.

-compile({nowarn_unused_function,merge_msg_proto_test4/3}).
merge_msg_proto_test4(#proto_test4{t3 = PFt3, ti = PFti}, #proto_test4{t3 = NFt3, ti = NFti}, TrUserData) ->
    #proto_test4{t3 =
                     if PFt3 /= undefined, NFt3 /= undefined -> merge_msg_proto_test3(PFt3, NFt3, TrUserData);
                        PFt3 == undefined -> NFt3;
                        NFt3 == undefined -> PFt3
                     end,
                 ti =
                     if PFti /= undefined, NFti /= undefined -> merge_msg_test_import(PFti, NFti, TrUserData);
                        PFti == undefined -> NFti;
                        NFti == undefined -> PFti
                     end}.

-compile({nowarn_unused_function,merge_msg_test_import/3}).
merge_msg_test_import(#test_import{ui32 = PFui32}, #test_import{ui32 = NFui32}, _) ->
    #test_import{ui32 =
                     if NFui32 =:= undefined -> PFui32;
                        true -> NFui32
                     end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), []);
verify_msg(X) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) -> verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 -> verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) -> mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        proto_test -> v_msg_proto_test(Msg, [MsgName], TrUserData);
        proto_test2 -> v_msg_proto_test2(Msg, [MsgName], TrUserData);
        proto_test3 -> v_msg_proto_test3(Msg, [MsgName], TrUserData);
        proto_test4 -> v_msg_proto_test4(Msg, [MsgName], TrUserData);
        test_import -> v_msg_test_import(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_proto_test/3}).
-dialyzer({nowarn_function,v_msg_proto_test/3}).
v_msg_proto_test(#proto_test{str = F1, ui32 = F2, rp_str = F3, rp_ui32 = F4}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [str | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [ui32 | Path], TrUserData)
    end,
    if is_list(F3) ->
           _ = [v_type_string(Elem, [rp_str | Path], TrUserData) || Elem <- F3],
           ok;
       true -> mk_type_error({invalid_list_of, string}, F3, [rp_str | Path])
    end,
    if is_list(F4) ->
           _ = [v_type_uint32(Elem, [rp_ui32 | Path], TrUserData) || Elem <- F4],
           ok;
       true -> mk_type_error({invalid_list_of, uint32}, F4, [rp_ui32 | Path])
    end,
    ok;
v_msg_proto_test(X, Path, _TrUserData) -> mk_type_error({expected_msg, proto_test}, X, Path).

-compile({nowarn_unused_function,v_msg_proto_test2/3}).
-dialyzer({nowarn_function,v_msg_proto_test2/3}).
v_msg_proto_test2(#proto_test2{str = F1, ti = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [str | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_test_import(F2, [ti | Path], TrUserData)
    end,
    ok;
v_msg_proto_test2(X, Path, _TrUserData) -> mk_type_error({expected_msg, proto_test2}, X, Path).

-compile({nowarn_unused_function,v_msg_proto_test3/3}).
-dialyzer({nowarn_function,v_msg_proto_test3/3}).
v_msg_proto_test3(#proto_test3{str = F1, ti = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_string(F1, [str | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_test_import(F2, [ti | Path], TrUserData)
    end,
    ok;
v_msg_proto_test3(X, Path, _TrUserData) -> mk_type_error({expected_msg, proto_test3}, X, Path).

-compile({nowarn_unused_function,v_msg_proto_test4/3}).
-dialyzer({nowarn_function,v_msg_proto_test4/3}).
v_msg_proto_test4(#proto_test4{t3 = F1, ti = F2}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_proto_test3(F1, [t3 | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_msg_test_import(F2, [ti | Path], TrUserData)
    end,
    ok;
v_msg_proto_test4(X, Path, _TrUserData) -> mk_type_error({expected_msg, proto_test4}, X, Path).

-compile({nowarn_unused_function,v_msg_test_import/3}).
-dialyzer({nowarn_function,v_msg_test_import/3}).
v_msg_test_import(#test_import{ui32 = F1}, Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [ui32 | Path], TrUserData)
    end,
    ok;
v_msg_test_import(X, Path, _TrUserData) -> mk_type_error({expected_msg, test_import}, X, Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData) when 0 =< N, N =< 4294967295 -> ok;
v_type_uint32(N, Path, _TrUserData) when is_integer(N) -> mk_type_error({value_out_of_range, uint32, unsigned, 32}, N, Path);
v_type_uint32(X, Path, _TrUserData) -> mk_type_error({bad_integer, uint32, unsigned, 32}, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData) when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
        B when is_binary(B) -> ok;
        {error, _, _} -> mk_type_error(bad_unicode_string, S, Path)
    catch
        error:badarg -> mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) -> mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error, {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) -> list_to_atom(lists:append(lists:join(".", lists:map(fun atom_to_list/1, lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, proto_test},
      [#field{name = str, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
       #field{name = ui32, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
       #field{name = rp_str, fnum = 3, rnum = 4, type = string, occurrence = repeated, opts = []},
       #field{name = rp_ui32, fnum = 4, rnum = 5, type = uint32, occurrence = repeated, opts = [packed]}]},
     {{msg, proto_test2}, [#field{name = str, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ti, fnum = 2, rnum = 3, type = {msg, test_import}, occurrence = optional, opts = []}]},
     {{msg, proto_test3}, [#field{name = str, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ti, fnum = 2, rnum = 3, type = {msg, test_import}, occurrence = optional, opts = []}]},
     {{msg, proto_test4}, [#field{name = t3, fnum = 1, rnum = 2, type = {msg, proto_test3}, occurrence = optional, opts = []}, #field{name = ti, fnum = 2, rnum = 3, type = {msg, test_import}, occurrence = optional, opts = []}]},
     {{msg, test_import}, [#field{name = ui32, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}]}].


get_msg_names() -> [proto_test, proto_test2, proto_test3, proto_test4, test_import].


get_group_names() -> [].


get_msg_or_group_names() -> [proto_test, proto_test2, proto_test3, proto_test4, test_import].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) -> erlang:error({no_such_enum, EnumName}).


find_msg_def(proto_test) ->
    [#field{name = str, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []},
     #field{name = ui32, fnum = 2, rnum = 3, type = uint32, occurrence = optional, opts = []},
     #field{name = rp_str, fnum = 3, rnum = 4, type = string, occurrence = repeated, opts = []},
     #field{name = rp_ui32, fnum = 4, rnum = 5, type = uint32, occurrence = repeated, opts = [packed]}];
find_msg_def(proto_test2) -> [#field{name = str, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ti, fnum = 2, rnum = 3, type = {msg, test_import}, occurrence = optional, opts = []}];
find_msg_def(proto_test3) -> [#field{name = str, fnum = 1, rnum = 2, type = string, occurrence = optional, opts = []}, #field{name = ti, fnum = 2, rnum = 3, type = {msg, test_import}, occurrence = optional, opts = []}];
find_msg_def(proto_test4) -> [#field{name = t3, fnum = 1, rnum = 2, type = {msg, proto_test3}, occurrence = optional, opts = []}, #field{name = ti, fnum = 2, rnum = 3, type = {msg, test_import}, occurrence = optional, opts = []}];
find_msg_def(test_import) -> [#field{name = ui32, fnum = 1, rnum = 2, type = uint32, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) -> erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) -> erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) -> erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) -> error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) -> error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) -> error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"proto_test">>) -> proto_test;
fqbin_to_msg_name(<<"proto_test2">>) -> proto_test2;
fqbin_to_msg_name(<<"proto_test3">>) -> proto_test3;
fqbin_to_msg_name(<<"proto_test4">>) -> proto_test4;
fqbin_to_msg_name(<<"test_import">>) -> test_import;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(proto_test) -> <<"proto_test">>;
msg_name_to_fqbin(proto_test2) -> <<"proto_test2">>;
msg_name_to_fqbin(proto_test3) -> <<"proto_test3">>;
msg_name_to_fqbin(proto_test4) -> <<"proto_test4">>;
msg_name_to_fqbin(test_import) -> <<"test_import">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) -> error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) -> error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "test_0.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["test_0.proto", "test_i.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["test_0", "test_i"].


get_msg_containment("test_0") -> [proto_test, proto_test2, proto_test3, proto_test4];
get_msg_containment("test_i") -> [test_import];
get_msg_containment(P) -> error({gpb_error, {badproto, P}}).


get_pkg_containment("test_0") -> undefined;
get_pkg_containment("test_i") -> undefined;
get_pkg_containment(P) -> error({gpb_error, {badproto, P}}).


get_service_containment("test_0") -> [];
get_service_containment("test_i") -> [];
get_service_containment(P) -> error({gpb_error, {badproto, P}}).


get_rpc_containment("test_0") -> [];
get_rpc_containment("test_i") -> [];
get_rpc_containment(P) -> error({gpb_error, {badproto, P}}).


get_enum_containment("test_0") -> [];
get_enum_containment("test_i") -> [];
get_enum_containment(P) -> error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"proto_test2">>) -> "test_0";
get_proto_by_msg_name_as_fqbin(<<"proto_test3">>) -> "test_0";
get_proto_by_msg_name_as_fqbin(<<"test_import">>) -> "test_i";
get_proto_by_msg_name_as_fqbin(<<"proto_test4">>) -> "test_0";
get_proto_by_msg_name_as_fqbin(<<"proto_test">>) -> "test_0";
get_proto_by_msg_name_as_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) -> error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) -> error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) -> error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.13.0".

gpb_version_as_list() ->
    [4,13,0].
